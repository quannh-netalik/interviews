{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Sleek Interviews","title":"Welcome to Sleek Interviews"},{"location":"#welcome-to-sleek-interviews","text":"","title":"Welcome to Sleek Interviews"},{"location":"backend/","text":"Backend Developer Questions What REST stands for? REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol for data communication. It revolves around resource where every component is a resource and a resource is accessed by a common interface using HTTP standard methods. REST was first introduced by Roy Fielding in 2000. What are NoSQL databases? A NoSQL database provides a mechanism for storage and retrieval of data that is modeled in means other than the tabular relations used in relational databases (like SQL, Oracle, etc.). What are the advantages / disadvatage when using a NoSQL database? What is SQL injection? Injection attacks stem from a lack of strict separation between program instructions (i.e., code) and user-provided (or external) input. This allows an attacker to inject malicious code into a data snippet. How to prevent? Prepared statements with parameterized queries Stored procedures Input validation - blacklist validation and whitelist validation Principle of least privilege - Application accounts shouldn\u2019t assign DBA or admin type access onto the database server. This ensures that if an application is compromised, an attacker won\u2019t have the rights to the database through the compromised application. How do you understand the term High Availability (HA)? Accessibility means the ability of the user of the program to gain access to the system. If the user cannot access the program, then it is considered unavailable. High availability also means that the program will be available to users without interruption. Using redundant server nodes with clustering is a common way of higher availability in web applications. Availability is also commonly expressed as a percentage of uptime in a given year. Compare SQL databases and MongoDB at a high level SQL databases store data in form of tables, rows, columns and records. This data is stored in a pre-defined data model which is not very much flexible for today's real-world highly growing applications. MongoDB in contrast uses a flexible structure which can be easily modified and extended. When to Redis? Redis is an in-memory, persistent data structure store that should be used to enable the performance of common operations with minimal complexity and maximum performance. Why Would You Opt For Microservices Architecture? There are plenty of pros that are offered by Microservices architecture. Here are a few of them: Microservices can adapt easily to other frameworks or technologies. Failure of a single process does not affect the entire system. Provides support to big enterprises as well as small teams. Can be deployed independently and in relatively less time. What is the difference between Monolithic, SOA and Microservices Architecture? Monolithic Architecture is similar to a big container wherein all the software components of an application are assembled together and tightly packaged. A Service-Oriented Architecture is a collection of services which communicate with each other. The communication can involve either simple data passing or it could involve two or more services coordinating some activity. Microservice Architecture is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain. How would you implement a SSO in a Microservice Architecture? Explain what the API Gateway pattern means? An API Gateway is a server that is the only possible entry point to the system. It is similar to the Facade pattern from object-oriented design. API Gateway encapsulates the architecture of the entire system and provides an API that is already adapted for each client. This API can also have other functions such as authentication, caching, monitoring, and load balancing. What's the difference between faking, mocking, and stubbing? Stub - an object that provides predefined answers to method calls. Mock - an object on which you set expectations. Fake - an object with limited capabilities (for the purposes of testing), e.g. a fake web service. What are the qualities any good backend developer must possess? In-depth knowledge of server programming languages like Python, Ruby, Java, Perl Great acquaintance with NoSQL and RDBMS Good understanding of front-end technologies (easy to work with frontend developers) Basic understanding of cloud deployments Ability to develop business logic within any app Ability to easily create functional APIs Design of service architecture Ability to optimize web applications","title":"Backend Developer Questions"},{"location":"backend/#backend-developer-questions","text":"","title":"Backend Developer Questions"},{"location":"backend/#what-rest-stands-for","text":"REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol for data communication. It revolves around resource where every component is a resource and a resource is accessed by a common interface using HTTP standard methods. REST was first introduced by Roy Fielding in 2000.","title":"What REST stands for?"},{"location":"backend/#what-are-nosql-databases","text":"A NoSQL database provides a mechanism for storage and retrieval of data that is modeled in means other than the tabular relations used in relational databases (like SQL, Oracle, etc.).","title":"What are NoSQL databases?"},{"location":"backend/#what-are-the-advantages-disadvatage-when-using-a-nosql-database","text":"","title":"What are the advantages / disadvatage when using a NoSQL database?"},{"location":"backend/#what-is-sql-injection","text":"Injection attacks stem from a lack of strict separation between program instructions (i.e., code) and user-provided (or external) input. This allows an attacker to inject malicious code into a data snippet.","title":"What is SQL injection?"},{"location":"backend/#how-to-prevent","text":"Prepared statements with parameterized queries Stored procedures Input validation - blacklist validation and whitelist validation Principle of least privilege - Application accounts shouldn\u2019t assign DBA or admin type access onto the database server. This ensures that if an application is compromised, an attacker won\u2019t have the rights to the database through the compromised application.","title":"How to prevent?"},{"location":"backend/#how-do-you-understand-the-term-high-availability-ha","text":"Accessibility means the ability of the user of the program to gain access to the system. If the user cannot access the program, then it is considered unavailable. High availability also means that the program will be available to users without interruption. Using redundant server nodes with clustering is a common way of higher availability in web applications. Availability is also commonly expressed as a percentage of uptime in a given year.","title":"How do you understand the term High Availability (HA)?"},{"location":"backend/#compare-sql-databases-and-mongodb-at-a-high-level","text":"SQL databases store data in form of tables, rows, columns and records. This data is stored in a pre-defined data model which is not very much flexible for today's real-world highly growing applications. MongoDB in contrast uses a flexible structure which can be easily modified and extended.","title":"Compare SQL databases and MongoDB at a high level"},{"location":"backend/#when-to-redis","text":"Redis is an in-memory, persistent data structure store that should be used to enable the performance of common operations with minimal complexity and maximum performance.","title":"When to Redis?"},{"location":"backend/#why-would-you-opt-for-microservices-architecture","text":"There are plenty of pros that are offered by Microservices architecture. Here are a few of them: Microservices can adapt easily to other frameworks or technologies. Failure of a single process does not affect the entire system. Provides support to big enterprises as well as small teams. Can be deployed independently and in relatively less time.","title":"Why Would You Opt For Microservices Architecture?"},{"location":"backend/#what-is-the-difference-between-monolithic-soa-and-microservices-architecture","text":"Monolithic Architecture is similar to a big container wherein all the software components of an application are assembled together and tightly packaged. A Service-Oriented Architecture is a collection of services which communicate with each other. The communication can involve either simple data passing or it could involve two or more services coordinating some activity. Microservice Architecture is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain.","title":"What is the difference between Monolithic, SOA and Microservices Architecture?"},{"location":"backend/#how-would-you-implement-a-sso-in-a-microservice-architecture","text":"","title":"How would you implement a SSO in a Microservice Architecture?"},{"location":"backend/#explain-what-the-api-gateway-pattern-means","text":"An API Gateway is a server that is the only possible entry point to the system. It is similar to the Facade pattern from object-oriented design. API Gateway encapsulates the architecture of the entire system and provides an API that is already adapted for each client. This API can also have other functions such as authentication, caching, monitoring, and load balancing.","title":"Explain what the API Gateway pattern means?"},{"location":"backend/#whats-the-difference-between-faking-mocking-and-stubbing","text":"Stub - an object that provides predefined answers to method calls. Mock - an object on which you set expectations. Fake - an object with limited capabilities (for the purposes of testing), e.g. a fake web service.","title":"What's the difference between faking, mocking, and stubbing?"},{"location":"backend/#what-are-the-qualities-any-good-backend-developer-must-possess","text":"In-depth knowledge of server programming languages like Python, Ruby, Java, Perl Great acquaintance with NoSQL and RDBMS Good understanding of front-end technologies (easy to work with frontend developers) Basic understanding of cloud deployments Ability to develop business logic within any app Ability to easily create functional APIs Design of service architecture Ability to optimize web applications","title":"What are the qualities any good backend developer must possess?"},{"location":"frontend/","text":"Frontend Developer Questions When building a new web site or maintaining one, can you explain some techniques you have used to increase performance? First identify it using metrics tool e.g. lighthouse Can you describe some SEO best practices or techniques you have used lately? Title tags. Assuming you\u2019ve already done your keyword research, this is one of the most important on-page SEO factors. \u2026 Meta descriptions. \u2026 Content with targeted keyword phrases. \u2026 Header tags and keyword phrases. \u2026 Internal page linking with anchor text. \u2026 Image ALT tags and filenames. \u2026 Make content easy to read. \u2026 Meta keywords. Can you explain any common techniques or recent issues solved in regards to front-end security?* Cross-Site Scripting (XSS) Attack \u2014 XSS is a type of attack in which an attacker inputs a malicious script into the web application. Cross-Site Request Forgery (CSRF) \u2014 CSRF is an attack that tricks the victim into submitting a malicious request. For every session of a user, the server should generate a randomized token ( CSRF Token ) and send it to the client. The client can save the token, from where javascript can read it. DOS (Denial Of Service) Attack Using Captcha at public-facing endpoints (login, registration, contact) \u2014 a captcha is a computer program or system intended to distinguish humans from bots. Content Security Policy (CSP) \u2014 CSP is a mechanism to significantly reduce the risk and impact of XSS attacks in modern browsers. Instead of blindly trusting /everything/ that a server delivers, CSP defines the Content-Security-Policy HTTP header that allows you to create a whitelist What actions have you personally taken on recent projects to increase maintainability of your code? Comment your code JSDOCS Error checking using lints Less code Easily modified code Testable Can you describe your workflow when you create a web page? Planning Wireframing Designing Code Test and debug Launch Can you describe the difference between progressive enhancement and graceful degradation? Progressive enhancement - small to big Progressive Enhancement starts at a broad minimum user experience and increases depending on user agent capabilities up to a more capable level, catering for agents that support more advanced features than the baseline. Graceful degradation - big to small Graceful Degradation starts at a ideal user experience level and decreases depending on user agent capabilities down to a minimum level, catering for agents that don\u2019t support certain features used by the baseline. How would you optimize a website\u2019s assets/resources? Image optimise reduce http requests reduce latency using cdn measure TTFB Browser Cache 1 Cache-Control 2 Pragma 3 Expires How many resources will a browser download from a given domain at a time? What are the exceptions? Name 3 ways to decrease page load (perceived or actual load time). Optimize Minimize HTTP Requests Resize images Explain what ARIA and screenreaders are, and how to make a website accessible. Explain some of the pros and cons for CSS animations versus JavaScript animations. What does CORS stand for and what issue does it address? How did you handle a disagreement with your boss or your collaborator? What resources do you use to learn about the latest in front end development and design? What skills are needed to be a good front-end developer? What role do you see yourself? Explain the difference between cookies, session storage, and local storage? JWT JSON Web Token Tutorial using AngularJS Laravel | Toptal","title":"Frontend Developer Questions"},{"location":"frontend/#frontend-developer-questions","text":"When building a new web site or maintaining one, can you explain some techniques you have used to increase performance? First identify it using metrics tool e.g. lighthouse Can you describe some SEO best practices or techniques you have used lately? Title tags. Assuming you\u2019ve already done your keyword research, this is one of the most important on-page SEO factors. \u2026 Meta descriptions. \u2026 Content with targeted keyword phrases. \u2026 Header tags and keyword phrases. \u2026 Internal page linking with anchor text. \u2026 Image ALT tags and filenames. \u2026 Make content easy to read. \u2026 Meta keywords. Can you explain any common techniques or recent issues solved in regards to front-end security?* Cross-Site Scripting (XSS) Attack \u2014 XSS is a type of attack in which an attacker inputs a malicious script into the web application. Cross-Site Request Forgery (CSRF) \u2014 CSRF is an attack that tricks the victim into submitting a malicious request. For every session of a user, the server should generate a randomized token ( CSRF Token ) and send it to the client. The client can save the token, from where javascript can read it. DOS (Denial Of Service) Attack Using Captcha at public-facing endpoints (login, registration, contact) \u2014 a captcha is a computer program or system intended to distinguish humans from bots. Content Security Policy (CSP) \u2014 CSP is a mechanism to significantly reduce the risk and impact of XSS attacks in modern browsers. Instead of blindly trusting /everything/ that a server delivers, CSP defines the Content-Security-Policy HTTP header that allows you to create a whitelist What actions have you personally taken on recent projects to increase maintainability of your code? Comment your code JSDOCS Error checking using lints Less code Easily modified code Testable Can you describe your workflow when you create a web page? Planning Wireframing Designing Code Test and debug Launch Can you describe the difference between progressive enhancement and graceful degradation? Progressive enhancement - small to big Progressive Enhancement starts at a broad minimum user experience and increases depending on user agent capabilities up to a more capable level, catering for agents that support more advanced features than the baseline. Graceful degradation - big to small Graceful Degradation starts at a ideal user experience level and decreases depending on user agent capabilities down to a minimum level, catering for agents that don\u2019t support certain features used by the baseline. How would you optimize a website\u2019s assets/resources? Image optimise reduce http requests reduce latency using cdn measure TTFB Browser Cache 1 Cache-Control 2 Pragma 3 Expires How many resources will a browser download from a given domain at a time? What are the exceptions? Name 3 ways to decrease page load (perceived or actual load time). Optimize Minimize HTTP Requests Resize images Explain what ARIA and screenreaders are, and how to make a website accessible. Explain some of the pros and cons for CSS animations versus JavaScript animations. What does CORS stand for and what issue does it address? How did you handle a disagreement with your boss or your collaborator? What resources do you use to learn about the latest in front end development and design? What skills are needed to be a good front-end developer? What role do you see yourself? Explain the difference between cookies, session storage, and local storage? JWT JSON Web Token Tutorial using AngularJS Laravel | Toptal","title":"Frontend Developer Questions"},{"location":"general-questions/","text":"Interview Format for Full-Stack Developer Key Components that we are looking for Reliability Critical Thinking Communication Collaboration Skills Leadership Technical Knowledge especially on our Tech Stack Breaking the Ice Introduce ourselves (the interviewers) Ask interviewee to introduce himself Ask for the job experiences General Questionnaires What do you think makes a good full stack web developer? Programming languages you are comfortable with. Pick a favourite language and why. What are you working on right now? Best implementation that you\u2019ve done so far or greatest challenge you experience. Ask about the routine What is your daily job routine? Meetings? Code Reviews? Requirements? JIRA? Do you know agile? Scrum? Kanban? Technical Questions Developer Knowledge on starting a project and delivery How do you manage your development environment not just your personal one, but for everyone in the team. CI / CD GIT Knowledge Build tools, such as web pack, grunt, gulp Can you explain GIT flow? Or any similar strategy on how you manage your repository. Performance Checks How do you reduce load time of web apps? Minimize HTTP requests Optimizing images Reducing redirects Enabling browser caching are some methods to reduce the load time of web apps Web Development Questions Can you explain REST and it\u2019s methods? GET POST PUT PATCH DELETE OPTIONS Explain CORS? What is the method used when doing a pre-flight request? (Answer: OPTIONS) How do you make sure your request comes thru? Do you know how to setup up a server less client-side app? Do you know the difference between, local storage, sessionstorage and cookies? Testing Capabilities How do you maintain code integrity? How do you do your unit tests? What do you usually test? React JS What is state and how do you use it? Source of data Determines how a component behaves and render What is react render() Trick Question: Can you return 2 react element on render() function? Can you explain Virtual DOM and how it works? Virtual DOM operates in three simple steps: Step 1 \u2013 The entire UI is re-rendered in Virtual DOM representation as soon as there are some underlying data changes. Step 2 \u2013 Now, the difference between the previous DOM representation and the new one (resulted from underlying data changes) is calculated. Step 3 \u2013 After the calculations are successfully carried out, the real DOM is updated in line with only the things that actually underwent changes. Difference between Real DOM and Virtual DOM? DOM Manipulation \u2013 Real DOM supports a very expensive DOM manipulation. Virtual DOM, on the contrary, has an inexpensive DOM manipulation. Element Update \u2013 Real DOM creates a new DOM when an element updates. Virtual DOM doesn\u2019t do so in such a case. Instead, it updates the JSX. Memory Wastage \u2013 Real DOM causes a lot of memory wastage while there is no memory wastage for Virtual DOM. Update Speed \u2013 Real DOM updates slowly. On the other end, the virtual DOM updates faster. Updating HTML \u2013 Real DOM can directly update HTML, while virtual DOM can\u2019t update HTML directly. Explain various lifecycle methods of React components. componentDidMount() \u2013 Executes on the client side after the first render componentDidUpdate() \u2013 Called immediately after rendering takes place in the DOM componentWillMount() \u2013 Executes immediately before rendering starts on both the client-side and the server-side componentWillReceiveProps() \u2013 Invokes when props are received from the parent class and before another render is called componentWillUnmount() \u2013 Used to clear up the memory space. Called right after the component is unmounted from the DOM componentWillUpdate() \u2013 Called immediately before rendering takes place in the DOM shouldComponentUpdate() \u2013 Returns either true or false. Though false by default, needs to be set to return true if the component needs to be updated Can you explain react router and how it works? Changes in the URL \u2013 A HTTP request is sent to a server for receiving a corresponding HTML page in conventional routing. React routing necessitates only for a change in the History attribute. Navigation \u2013 In conventional routing, the user actually navigates across different web pages for each individual view. In React routing, however, the users feel like they are navigating across distinct webpages while in actuality they aren\u2019t. Pages \u2013 Whereas in React routing only a single HTML page is involved, each view corresponds to a new file in conventional routing. : How does the state differ from props in React? Changes inside child components are possible with props but not with state Changes inside the component aren\u2019t possible with props but with state Props allow for a parent component to change the value, state doesn\u2019t How is Stateless component different from a Stateful component? The stateless component calculates the internal state of the component but does not have the authority to change state. There is no knowledge about the past, current, or future but receives props from the Stateful component, which are treated as a callback function. Javascript When do you use use strict; Global vs Block Level Scope Synchrous vs Async Common structure of a callback When do you use async/await Promise, callback What is an IIFE How do you write clean code in JS? 8.How to deep-freeze object in JavaScript? NodeJS Questions about having a Critical Sense Ask about technical decisions that were made, and what are the problems that were encountered to come up with such scenario If you have this X situation how would you advise us Situational Questions and Behaviour Describe a time when you made a mistake in your work. How did you fix it? Follow the story on what happened about the error How did they rectify it What are the lessons they took out from it Code Reviews How do you handle code reviews? What happens when your entire code was rejected? How do you give code reviews? What kind of work do you expect? Are you ok with overtimes? Internet speed https://github.com/learning-zone/nodejs-interview-questions#q-what-is-chaining-process-in-nodejs https://github.com/SarasArya/Node.js-Interview-Questions","title":"Interview Format for Full-Stack Developer"},{"location":"general-questions/#interview-format-for-full-stack-developer","text":"","title":"Interview Format for Full-Stack Developer"},{"location":"general-questions/#key-components-that-we-are-looking-for","text":"Reliability Critical Thinking Communication Collaboration Skills Leadership Technical Knowledge especially on our Tech Stack","title":"Key Components that we are looking for"},{"location":"general-questions/#breaking-the-ice","text":"Introduce ourselves (the interviewers) Ask interviewee to introduce himself Ask for the job experiences","title":"Breaking the Ice"},{"location":"general-questions/#general-questionnaires","text":"What do you think makes a good full stack web developer? Programming languages you are comfortable with. Pick a favourite language and why. What are you working on right now? Best implementation that you\u2019ve done so far or greatest challenge you experience.","title":"General Questionnaires"},{"location":"general-questions/#ask-about-the-routine","text":"What is your daily job routine? Meetings? Code Reviews? Requirements? JIRA? Do you know agile? Scrum? Kanban?","title":"Ask about the routine"},{"location":"general-questions/#technical-questions","text":"","title":"Technical Questions"},{"location":"general-questions/#developer-knowledge-on-starting-a-project-and-delivery","text":"How do you manage your development environment not just your personal one, but for everyone in the team. CI / CD GIT Knowledge Build tools, such as web pack, grunt, gulp Can you explain GIT flow? Or any similar strategy on how you manage your repository.","title":"Developer Knowledge on starting a project and delivery"},{"location":"general-questions/#performance-checks","text":"How do you reduce load time of web apps? Minimize HTTP requests Optimizing images Reducing redirects Enabling browser caching are some methods to reduce the load time of web apps","title":"Performance Checks"},{"location":"general-questions/#web-development-questions","text":"Can you explain REST and it\u2019s methods? GET POST PUT PATCH DELETE OPTIONS Explain CORS? What is the method used when doing a pre-flight request? (Answer: OPTIONS) How do you make sure your request comes thru? Do you know how to setup up a server less client-side app? Do you know the difference between, local storage, sessionstorage and cookies?","title":"Web Development Questions"},{"location":"general-questions/#testing-capabilities","text":"How do you maintain code integrity? How do you do your unit tests? What do you usually test?","title":"Testing Capabilities"},{"location":"general-questions/#react-js","text":"What is state and how do you use it? Source of data Determines how a component behaves and render What is react render() Trick Question: Can you return 2 react element on render() function? Can you explain Virtual DOM and how it works? Virtual DOM operates in three simple steps: Step 1 \u2013 The entire UI is re-rendered in Virtual DOM representation as soon as there are some underlying data changes. Step 2 \u2013 Now, the difference between the previous DOM representation and the new one (resulted from underlying data changes) is calculated. Step 3 \u2013 After the calculations are successfully carried out, the real DOM is updated in line with only the things that actually underwent changes. Difference between Real DOM and Virtual DOM? DOM Manipulation \u2013 Real DOM supports a very expensive DOM manipulation. Virtual DOM, on the contrary, has an inexpensive DOM manipulation. Element Update \u2013 Real DOM creates a new DOM when an element updates. Virtual DOM doesn\u2019t do so in such a case. Instead, it updates the JSX. Memory Wastage \u2013 Real DOM causes a lot of memory wastage while there is no memory wastage for Virtual DOM. Update Speed \u2013 Real DOM updates slowly. On the other end, the virtual DOM updates faster. Updating HTML \u2013 Real DOM can directly update HTML, while virtual DOM can\u2019t update HTML directly. Explain various lifecycle methods of React components. componentDidMount() \u2013 Executes on the client side after the first render componentDidUpdate() \u2013 Called immediately after rendering takes place in the DOM componentWillMount() \u2013 Executes immediately before rendering starts on both the client-side and the server-side componentWillReceiveProps() \u2013 Invokes when props are received from the parent class and before another render is called componentWillUnmount() \u2013 Used to clear up the memory space. Called right after the component is unmounted from the DOM componentWillUpdate() \u2013 Called immediately before rendering takes place in the DOM shouldComponentUpdate() \u2013 Returns either true or false. Though false by default, needs to be set to return true if the component needs to be updated Can you explain react router and how it works? Changes in the URL \u2013 A HTTP request is sent to a server for receiving a corresponding HTML page in conventional routing. React routing necessitates only for a change in the History attribute. Navigation \u2013 In conventional routing, the user actually navigates across different web pages for each individual view. In React routing, however, the users feel like they are navigating across distinct webpages while in actuality they aren\u2019t. Pages \u2013 Whereas in React routing only a single HTML page is involved, each view corresponds to a new file in conventional routing. : How does the state differ from props in React? Changes inside child components are possible with props but not with state Changes inside the component aren\u2019t possible with props but with state Props allow for a parent component to change the value, state doesn\u2019t How is Stateless component different from a Stateful component? The stateless component calculates the internal state of the component but does not have the authority to change state. There is no knowledge about the past, current, or future but receives props from the Stateful component, which are treated as a callback function.","title":"React JS"},{"location":"general-questions/#javascript","text":"When do you use use strict; Global vs Block Level Scope Synchrous vs Async Common structure of a callback When do you use async/await Promise, callback What is an IIFE How do you write clean code in JS? 8.How to deep-freeze object in JavaScript?","title":"Javascript"},{"location":"general-questions/#nodejs","text":"","title":"NodeJS"},{"location":"general-questions/#questions-about-having-a-critical-sense","text":"Ask about technical decisions that were made, and what are the problems that were encountered to come up with such scenario If you have this X situation how would you advise us","title":"Questions about having a Critical Sense"},{"location":"general-questions/#situational-questions-and-behaviour","text":"Describe a time when you made a mistake in your work. How did you fix it? Follow the story on what happened about the error How did they rectify it What are the lessons they took out from it Code Reviews How do you handle code reviews? What happens when your entire code was rejected? How do you give code reviews? What kind of work do you expect? Are you ok with overtimes? Internet speed https://github.com/learning-zone/nodejs-interview-questions#q-what-is-chaining-process-in-nodejs https://github.com/SarasArya/Node.js-Interview-Questions","title":"Situational Questions and Behaviour"},{"location":"js-coding-exercise/","text":"General Javascript Interview Coding Exercise GitHub - sudheerj/javascript-interview-questions: List of 1000 JavaScript Interview Questions What is a callback function? A callback function is a function that is passed to another function as an argument and is executed after some operation has been completed. Below is an example of a simple callback function that logs to the console /after/ some operations have been completed. 1. Make a function called shoutHelloWorld that receives an array and a callback 2. The array is a list of string [ hello , world ] 3. and the callback function will console.log hello, world function shoutHelloWorld(arr, callback) { arr = arr.join( , ); callback(arr); } let arr = [ hello , world ]; shoutHelloWorld(arr, function(arr) { console.log(arr); }); Create an ES6 Class 1. name the class Person 2. properties are first_name and last_name 3. provide a method called getFullName and should return My full name is $first_name $last_name class Person{ constructor(first_name, last_name) { this.first_name = first_name; this.last_name= last_name; } getFullName() { return `My full name is ${this.first_name} ${this.last_name}`; } } // Usage let aPerson = new Person( a , b ); aPerson.getFullName(); What are the differences between cookie, local storage and session storage [image:FC75C253-304C-4118-9D40-3F0FEF43ECFC-44737-000062E6D8DD3235/Screen Shot 2021-04-29 at 9.46.08 AM.png] Promise Chaining The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let\u2019s take an example of promise chaining for calculating the final result, new Promise(function(resolve, reject) { setTimeout(() = resolve(1), 1000); }).then(function(result) { console.log(result); // 1 return result * 2; }).then(function(result) { console.log(result); // 2 return result * 3; }).then(function(result) { console.log(result); // 6 return result * 4; }); In the above handlers, the result is passed to the chain of .then() handlers with the below work flow, * The initial promise resolves in 1 second, * After that .then handler is called by logging the result(1) and then return a promise with the value of result * 2. * After that the value passed to the next .then handler by logging the result(2) and return a promise with result * 3. * Finally the value passed to the last .then handler by logging the result(6) and return a promise with result * 4. Promise.all Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below, Note: Remember that the order of the promises(output the result) is maintained as per input order. Promise.all([Promise1, Promise2, Promise3]) .then(result) = { console.log(result) }) .catch(error = console.log(`Error in promises ${error}`)) What is the purpose of the delete operator // How do you call use name by destructuring let user= {name: John , age:20}; let { name } = user; delete user.age; console.log(user); // {name: John }","title":"General Javascript Interview Coding Exercise"},{"location":"js-coding-exercise/#general-javascript-interview-coding-exercise","text":"GitHub - sudheerj/javascript-interview-questions: List of 1000 JavaScript Interview Questions","title":"General Javascript Interview Coding Exercise"},{"location":"js-coding-exercise/#what-is-a-callback-function","text":"A callback function is a function that is passed to another function as an argument and is executed after some operation has been completed. Below is an example of a simple callback function that logs to the console /after/ some operations have been completed. 1. Make a function called shoutHelloWorld that receives an array and a callback 2. The array is a list of string [ hello , world ] 3. and the callback function will console.log hello, world function shoutHelloWorld(arr, callback) { arr = arr.join( , ); callback(arr); } let arr = [ hello , world ]; shoutHelloWorld(arr, function(arr) { console.log(arr); });","title":"What is a callback function?"},{"location":"js-coding-exercise/#create-an-es6-class","text":"1. name the class Person 2. properties are first_name and last_name 3. provide a method called getFullName and should return My full name is $first_name $last_name class Person{ constructor(first_name, last_name) { this.first_name = first_name; this.last_name= last_name; } getFullName() { return `My full name is ${this.first_name} ${this.last_name}`; } } // Usage let aPerson = new Person( a , b ); aPerson.getFullName();","title":"Create an ES6 Class"},{"location":"js-coding-exercise/#what-are-the-differences-between-cookie-local-storage-and-session-storage","text":"[image:FC75C253-304C-4118-9D40-3F0FEF43ECFC-44737-000062E6D8DD3235/Screen Shot 2021-04-29 at 9.46.08 AM.png]","title":"What are the differences between cookie, local storage and session storage"},{"location":"js-coding-exercise/#promise-chaining","text":"The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let\u2019s take an example of promise chaining for calculating the final result, new Promise(function(resolve, reject) { setTimeout(() = resolve(1), 1000); }).then(function(result) { console.log(result); // 1 return result * 2; }).then(function(result) { console.log(result); // 2 return result * 3; }).then(function(result) { console.log(result); // 6 return result * 4; }); In the above handlers, the result is passed to the chain of .then() handlers with the below work flow, * The initial promise resolves in 1 second, * After that .then handler is called by logging the result(1) and then return a promise with the value of result * 2. * After that the value passed to the next .then handler by logging the result(2) and return a promise with result * 3. * Finally the value passed to the last .then handler by logging the result(6) and return a promise with result * 4.","title":"Promise Chaining"},{"location":"js-coding-exercise/#promiseall","text":"Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below, Note: Remember that the order of the promises(output the result) is maintained as per input order. Promise.all([Promise1, Promise2, Promise3]) .then(result) = { console.log(result) }) .catch(error = console.log(`Error in promises ${error}`))","title":"Promise.all"},{"location":"js-coding-exercise/#what-is-the-purpose-of-the-delete-operator","text":"// How do you call use name by destructuring let user= {name: John , age:20}; let { name } = user; delete user.age; console.log(user); // {name: John }","title":"What is the purpose of the delete operator"},{"location":"node-mongo/","text":"NodeJS + MongoDb Interview Coding Exercise GitHub - learning-zone/nodejs-interview-questions: Frequently Asked Node.js Interview Questions Simple Express Service Inside the app.listen method can you console.log which environment you are running on (development or production) var express = require('express'); var app = express(); app.get('/', function (req, res) { res.send('Hello World!'); }); app.listen(3000, function () { console.log('Example app listening on port 3000!'); }); Err first callback fs.readFile( file.json , function ( err, data ) { if ( err ) { console.error( err ); } console.log( data ); }); Return all users Base Template to give to the interviewee (an express application) Objectives 1. Provide GET RESTful API called /users and return all the record on the mongodb collection 2. Provide POST RESTful API called /users and save a record 3. Provide DELETE RESTful API called /users and archive the user 4. Update the in #1 GET RESTful API called /users and return all the record on the mongodb collection except the archived user const mongoose = require( mongoose ); const Schema = mongoose.Schema; let userSchema = new Schema( { last_name: String, first_name: String, }, { timestamps: true } ); module.exports = mongoose.model( User , userSchema); var express = require('express'); var app = express(); // Mongoose Schema const Users = require( ../schemas/company-user ); Sample Solution var express = require('express'); var app = express(); // Mongoose Schema const Users = require( ../schemas/company-user ); app.get('/users', async (req, res) = { try { const result = await Users.find({}); return res.json(result); } catch (error) { console.log(error); } }); app.post('/users', async (req, res) = { try { let userData = { first_name: req.body.first_name, last_name: req.body.last_name, } let newUser = new Users(userData); return await user.save(); } catch (error) { console.log(error); } });","title":"NodeJS + MongoDb Interview Coding Exercise"},{"location":"node-mongo/#nodejs-mongodb-interview-coding-exercise","text":"GitHub - learning-zone/nodejs-interview-questions: Frequently Asked Node.js Interview Questions","title":"NodeJS + MongoDb Interview Coding Exercise"},{"location":"node-mongo/#simple-express-service","text":"Inside the app.listen method can you console.log which environment you are running on (development or production) var express = require('express'); var app = express(); app.get('/', function (req, res) { res.send('Hello World!'); }); app.listen(3000, function () { console.log('Example app listening on port 3000!'); });","title":"Simple Express Service"},{"location":"node-mongo/#err-first-callback","text":"fs.readFile( file.json , function ( err, data ) { if ( err ) { console.error( err ); } console.log( data ); });","title":"Err first callback"},{"location":"node-mongo/#return-all-users","text":"Base Template to give to the interviewee (an express application) Objectives 1. Provide GET RESTful API called /users and return all the record on the mongodb collection 2. Provide POST RESTful API called /users and save a record 3. Provide DELETE RESTful API called /users and archive the user 4. Update the in #1 GET RESTful API called /users and return all the record on the mongodb collection except the archived user const mongoose = require( mongoose ); const Schema = mongoose.Schema; let userSchema = new Schema( { last_name: String, first_name: String, }, { timestamps: true } ); module.exports = mongoose.model( User , userSchema); var express = require('express'); var app = express(); // Mongoose Schema const Users = require( ../schemas/company-user ); Sample Solution var express = require('express'); var app = express(); // Mongoose Schema const Users = require( ../schemas/company-user ); app.get('/users', async (req, res) = { try { const result = await Users.find({}); return res.json(result); } catch (error) { console.log(error); } }); app.post('/users', async (req, res) = { try { let userData = { first_name: req.body.first_name, last_name: req.body.last_name, } let newUser = new Users(userData); return await user.save(); } catch (error) { console.log(error); } });","title":"Return all users"}]}